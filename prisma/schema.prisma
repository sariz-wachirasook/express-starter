// prisma schema: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  // NOTE: you don't need a name if you have a profile with a first and last name
  name               String
  password           String
  role               Role                 @default(USER)
  profile            Profile?
  refreshToken       RefreshToken[]
  socialLogin        SocialLogin[]
  resetPasswordToken ResetPasswordToken[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([email], name: "email")
  @@map(name: "user")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())

  @@map(name: "refresh_token")
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())

  @@map(name: "reset_password_token")
}

model Profile {
  id                     Int       @id @default(autoincrement())
  // NOTE: you don't need a first and last name if you have a name on the user
  firstName              String?
  lastName               String?
  phoneNumber            String?
  birthDate              DateTime?
  gender                 Gender    @default(u)
  isNewsletterSubscribed Boolean   @default(false)
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 Int       @unique

  @@map(name: "profile")
}

model SocialLogin {
  id         Int      @id @default(autoincrement())
  provider   String
  providerId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  @@map(name: "social_login")
}

enum Role {
  ADMINISTRATOR
  USER
}

enum Gender {
  u
  m
  f
}
