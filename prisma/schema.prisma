// prisma schema: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  // NOTE: you don't need a name if you have a profile with a first and last name
  name          String
  password      String
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  passwordReset PasswordReset[]
  socialLogin   SocialLogin[]
  profile       Profile?
  refreshToken  RefreshToken[]

  @@index([email], name: "email")
  @@map(name: "user")
}

model RefreshToken {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  @@map(name: "refresh_token")
}

model Profile {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [userId], references: [id])
  userId      Int     @unique
  // NOTE: you don't need a first and last name if you have a name on the user
  firstName   String?
  lastName    String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  phoneNumber String?
  gender      Gender? @default(u)

  @@map(name: "profile")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map(name: "password_reset")
}

model SocialLogin {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  provider   String
  providerId String
  createdAt  DateTime @default(now())

  @@map(name: "social_login")
}

enum Role {
  ADMINISTRATOR
  USER
}

enum Gender {
  u
  m
  f
}
